// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "LayoutPropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

LayoutPropertyGroup::LayoutPropertyGroup()
{
    m_padding = std::make_unique<SizePropertyGroup>();
    m_margins = std::make_unique<SizePropertyGroup>();
}

void LayoutPropertyGroup::update(const LayoutProperty &newState)
{
    m_width = newState.width().value_or(qreal{});
    m_height = newState.height().value_or(qreal{});
    m_spacing = newState.spacing().value_or(qreal{});
    m_alignment = newState.alignment().value_or(Qt::Alignment{});
    m_padding->update(newState.padding().value_or(SizeProperty{}));
    m_margins->update(newState.margins().value_or(SizeProperty{}));
}

qreal LayoutPropertyGroup::width() const
{
    return m_width;
}

void LayoutPropertyGroup::setWidth(const qreal &newValue)
{
    m_width = newValue;
}

QBindable<qreal> LayoutPropertyGroup::bindableWidth()
{
    return QBindable<qreal>(&m_width);
}

qreal LayoutPropertyGroup::height() const
{
    return m_height;
}

void LayoutPropertyGroup::setHeight(const qreal &newValue)
{
    m_height = newValue;
}

QBindable<qreal> LayoutPropertyGroup::bindableHeight()
{
    return QBindable<qreal>(&m_height);
}

qreal LayoutPropertyGroup::spacing() const
{
    return m_spacing;
}

void LayoutPropertyGroup::setSpacing(const qreal &newValue)
{
    m_spacing = newValue;
}

QBindable<qreal> LayoutPropertyGroup::bindableSpacing()
{
    return QBindable<qreal>(&m_spacing);
}

Qt::Alignment LayoutPropertyGroup::alignment() const
{
    return m_alignment;
}

void LayoutPropertyGroup::setAlignment(const Qt::Alignment &newValue)
{
    m_alignment = newValue;
}

QBindable<Qt::Alignment> LayoutPropertyGroup::bindableAlignment()
{
    return QBindable<Qt::Alignment>(&m_alignment);
}

SizePropertyGroup *LayoutPropertyGroup::padding() const
{
    return m_padding.get();
}

SizePropertyGroup *LayoutPropertyGroup::margins() const
{
    return m_margins.get();
}

#include "moc_LayoutPropertyGroup.cpp"
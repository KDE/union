// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "AlignmentPropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

AlignmentPropertyGroup::AlignmentPropertyGroup()
{
}

void AlignmentPropertyGroup::update(const AlignmentProperty &newState)
{
    m_container = newState.container().value_or(Union::Properties::AlignmentContainer{});
    m_horizontal = newState.horizontal().value_or(Union::Properties::Alignment{});
    m_vertical = newState.vertical().value_or(Union::Properties::Alignment{});
    m_order = newState.order().value_or(int{});
}

Union::Properties::AlignmentContainer AlignmentPropertyGroup::container() const
{
    return m_container;
}

void AlignmentPropertyGroup::setContainer(const Union::Properties::AlignmentContainer &newValue)
{
    m_container = newValue;
}

QBindable<Union::Properties::AlignmentContainer> AlignmentPropertyGroup::bindableContainer()
{
    return QBindable<Union::Properties::AlignmentContainer>(&m_container);
}

Union::Properties::Alignment AlignmentPropertyGroup::horizontal() const
{
    return m_horizontal;
}

void AlignmentPropertyGroup::setHorizontal(const Union::Properties::Alignment &newValue)
{
    m_horizontal = newValue;
}

QBindable<Union::Properties::Alignment> AlignmentPropertyGroup::bindableHorizontal()
{
    return QBindable<Union::Properties::Alignment>(&m_horizontal);
}

Union::Properties::Alignment AlignmentPropertyGroup::vertical() const
{
    return m_vertical;
}

void AlignmentPropertyGroup::setVertical(const Union::Properties::Alignment &newValue)
{
    m_vertical = newValue;
}

QBindable<Union::Properties::Alignment> AlignmentPropertyGroup::bindableVertical()
{
    return QBindable<Union::Properties::Alignment>(&m_vertical);
}

int AlignmentPropertyGroup::order() const
{
    return m_order;
}

void AlignmentPropertyGroup::setOrder(const int &newValue)
{
    m_order = newValue;
}

QBindable<int> AlignmentPropertyGroup::bindableOrder()
{
    return QBindable<int>(&m_order);
}

#include "moc_AlignmentPropertyGroup.cpp"
// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `scripts/generate_properties.py`.

#pragma once

// clang-format off
#include <QObject>
#include <QProperty>
#include <qqmlregistration.h>

#include <QColor>

#include <properties/PaletteProperty.h>

// clang-format on

class PalettePropertyGroup : public QObject
{
    Q_OBJECT
    QML_ANONYMOUS

public:
    PalettePropertyGroup();

    void update(const Union::Properties::PaletteProperty &newState);

    Q_PROPERTY(QColor foreground READ foreground WRITE setForeground BINDABLE bindableForeground NOTIFY foregroundChanged)
    QColor foreground() const;
    void setForeground(const QColor &newValue);
    QBindable<QColor> bindableForeground();
    Q_SIGNAL void foregroundChanged();

    Q_PROPERTY(QColor background READ background WRITE setBackground BINDABLE bindableBackground NOTIFY backgroundChanged)
    QColor background() const;
    void setBackground(const QColor &newValue);
    QBindable<QColor> bindableBackground();
    Q_SIGNAL void backgroundChanged();

    Q_PROPERTY(QColor decoration READ decoration WRITE setDecoration BINDABLE bindableDecoration NOTIFY decorationChanged)
    QColor decoration() const;
    void setDecoration(const QColor &newValue);
    QBindable<QColor> bindableDecoration();
    Q_SIGNAL void decorationChanged();

private:
    Q_OBJECT_BINDABLE_PROPERTY(PalettePropertyGroup, QColor, m_foreground, &PalettePropertyGroup::foregroundChanged)
    Q_OBJECT_BINDABLE_PROPERTY(PalettePropertyGroup, QColor, m_background, &PalettePropertyGroup::backgroundChanged)
    Q_OBJECT_BINDABLE_PROPERTY(PalettePropertyGroup, QColor, m_decoration, &PalettePropertyGroup::decorationChanged)
};
// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

// clang-format off
#include <QObject>
#include <QProperty>
#include <qqmlregistration.h>

#include <QtGlobal>

#include <properties/LayoutProperty.h>

#include "SizePropertyGroup.h"
#include "SizePropertyGroup.h"
// clang-format on

class LayoutPropertyGroup : public QObject
{
    Q_OBJECT
    QML_ANONYMOUS

public:
    LayoutPropertyGroup();

    void update(const Union::Properties::LayoutProperty &newState);

    Q_PROPERTY(qreal width READ width WRITE setWidth BINDABLE bindableWidth NOTIFY widthChanged)
    qreal width() const;
    void setWidth(const qreal &newValue);
    QBindable<qreal> bindableWidth();
    Q_SIGNAL void widthChanged();

    Q_PROPERTY(qreal height READ height WRITE setHeight BINDABLE bindableHeight NOTIFY heightChanged)
    qreal height() const;
    void setHeight(const qreal &newValue);
    QBindable<qreal> bindableHeight();
    Q_SIGNAL void heightChanged();

    Q_PROPERTY(qreal spacing READ spacing WRITE setSpacing BINDABLE bindableSpacing NOTIFY spacingChanged)
    qreal spacing() const;
    void setSpacing(const qreal &newValue);
    QBindable<qreal> bindableSpacing();
    Q_SIGNAL void spacingChanged();

    Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment BINDABLE bindableAlignment NOTIFY alignmentChanged)
    Qt::Alignment alignment() const;
    void setAlignment(const Qt::Alignment &newValue);
    QBindable<Qt::Alignment> bindableAlignment();
    Q_SIGNAL void alignmentChanged();

    Q_PROPERTY(SizePropertyGroup *padding READ padding CONSTANT)
    SizePropertyGroup *padding() const;

    Q_PROPERTY(SizePropertyGroup *margins READ margins CONSTANT)
    SizePropertyGroup *margins() const;

private:
    Q_OBJECT_BINDABLE_PROPERTY(LayoutPropertyGroup, qreal, m_width, &LayoutPropertyGroup::widthChanged)
    Q_OBJECT_BINDABLE_PROPERTY(LayoutPropertyGroup, qreal, m_height, &LayoutPropertyGroup::heightChanged)
    Q_OBJECT_BINDABLE_PROPERTY(LayoutPropertyGroup, qreal, m_spacing, &LayoutPropertyGroup::spacingChanged)
    Q_OBJECT_BINDABLE_PROPERTY(LayoutPropertyGroup, Qt::Alignment, m_alignment, &LayoutPropertyGroup::alignmentChanged)
    std::unique_ptr<SizePropertyGroup> m_padding;
    std::unique_ptr<SizePropertyGroup> m_margins;
};
// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "ShadowPropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

ShadowPropertyGroup::ShadowPropertyGroup()
{
    m_offsets = std::make_unique<SizePropertyGroup>();
    m_left = std::make_unique<LinePropertyGroup>();
    m_right = std::make_unique<LinePropertyGroup>();
    m_top = std::make_unique<LinePropertyGroup>();
    m_bottom = std::make_unique<LinePropertyGroup>();
    m_topLeft = std::make_unique<CornerPropertyGroup>();
    m_topRight = std::make_unique<CornerPropertyGroup>();
    m_bottomLeft = std::make_unique<CornerPropertyGroup>();
    m_bottomRight = std::make_unique<CornerPropertyGroup>();
}

void ShadowPropertyGroup::update(const ShadowProperty &newState)
{
    m_offsets->update(newState.offsets().value_or(SizeProperty{}));
    m_left->update(newState.left().value_or(LineProperty{}));
    m_right->update(newState.right().value_or(LineProperty{}));
    m_top->update(newState.top().value_or(LineProperty{}));
    m_bottom->update(newState.bottom().value_or(LineProperty{}));
    m_topLeft->update(newState.topLeft().value_or(CornerProperty{}));
    m_topRight->update(newState.topRight().value_or(CornerProperty{}));
    m_bottomLeft->update(newState.bottomLeft().value_or(CornerProperty{}));
    m_bottomRight->update(newState.bottomRight().value_or(CornerProperty{}));
}

SizePropertyGroup *ShadowPropertyGroup::offsets() const
{
    return m_offsets.get();
}

LinePropertyGroup *ShadowPropertyGroup::left() const
{
    return m_left.get();
}

LinePropertyGroup *ShadowPropertyGroup::right() const
{
    return m_right.get();
}

LinePropertyGroup *ShadowPropertyGroup::top() const
{
    return m_top.get();
}

LinePropertyGroup *ShadowPropertyGroup::bottom() const
{
    return m_bottom.get();
}

CornerPropertyGroup *ShadowPropertyGroup::topLeft() const
{
    return m_topLeft.get();
}

CornerPropertyGroup *ShadowPropertyGroup::topRight() const
{
    return m_topRight.get();
}

CornerPropertyGroup *ShadowPropertyGroup::bottomLeft() const
{
    return m_bottomLeft.get();
}

CornerPropertyGroup *ShadowPropertyGroup::bottomRight() const
{
    return m_bottomRight.get();
}

#include "moc_ShadowPropertyGroup.cpp"
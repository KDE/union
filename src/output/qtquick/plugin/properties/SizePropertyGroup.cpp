// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "SizePropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

SizePropertyGroup::SizePropertyGroup()
{
}

void SizePropertyGroup::update(const SizeProperty &newState)
{
    m_left = newState.left().value_or(qreal{});
    m_right = newState.right().value_or(qreal{});
    m_top = newState.top().value_or(qreal{});
    m_bottom = newState.bottom().value_or(qreal{});
}

qreal SizePropertyGroup::left() const
{
    return m_left;
}

void SizePropertyGroup::setLeft(const qreal &newValue)
{
    m_left = newValue;
}

QBindable<qreal> SizePropertyGroup::bindableLeft()
{
    return QBindable<qreal>(&m_left);
}

qreal SizePropertyGroup::right() const
{
    return m_right;
}

void SizePropertyGroup::setRight(const qreal &newValue)
{
    m_right = newValue;
}

QBindable<qreal> SizePropertyGroup::bindableRight()
{
    return QBindable<qreal>(&m_right);
}

qreal SizePropertyGroup::top() const
{
    return m_top;
}

void SizePropertyGroup::setTop(const qreal &newValue)
{
    m_top = newValue;
}

QBindable<qreal> SizePropertyGroup::bindableTop()
{
    return QBindable<qreal>(&m_top);
}

qreal SizePropertyGroup::bottom() const
{
    return m_bottom;
}

void SizePropertyGroup::setBottom(const qreal &newValue)
{
    m_bottom = newValue;
}

QBindable<qreal> SizePropertyGroup::bindableBottom()
{
    return QBindable<qreal>(&m_bottom);
}

#include "moc_SizePropertyGroup.cpp"
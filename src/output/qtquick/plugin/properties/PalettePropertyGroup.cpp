// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
// SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>
//
// This file is automatically generated from qml_group.cpp.j2.
// To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "PalettePropertyGroup.h"

#include <QQmlEngine>

#include "QuickStyle.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

PalettePropertyGroup::PalettePropertyGroup(QuickStyle *style)
    : QObject()
    , m_style(style)
{
}

void PalettePropertyGroup::update(const PaletteProperty &newState)
{
    m_state = newState;
    Q_EMIT accentChanged();
    Q_EMIT alternateBaseChanged();
    Q_EMIT baseChanged();
    Q_EMIT brightTextChanged();
    Q_EMIT buttonChanged();
    Q_EMIT buttonTextChanged();
    Q_EMIT darkChanged();
    Q_EMIT highlightChanged();
    Q_EMIT highlightedTextChanged();
    Q_EMIT lightChanged();
    Q_EMIT linkChanged();
    Q_EMIT linkVisitedChanged();
    Q_EMIT midChanged();
    Q_EMIT midlightChanged();
    Q_EMIT placeholderTextChanged();
    Q_EMIT shadowChanged();
    Q_EMIT textChanged();
    Q_EMIT toolTipBaseChanged();
    Q_EMIT toolTipTextChanged();
    Q_EMIT windowChanged();
    Q_EMIT windowTextChanged();
    Q_EMIT positiveChanged();
    Q_EMIT neutralChanged();
    Q_EMIT negativeChanged();

    if (!m_component) {
        // We need a QML engine to create a QQmlComponent. Try to determine it
        // based on the style we're part of.
        Q_ASSERT(m_style);
        m_component = new QQmlComponent(m_style->engine());
        m_component->setData("import QtQuick; Palette { }"_ba, QUrl{});
    }

    if (m_palette) {
        delete m_palette;
    }

    m_palette = m_component->create();

    Q_EMIT updated();
}

QJSValue PalettePropertyGroup::accent() const
{
    auto value = m_state.accent();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::alternateBase() const
{
    auto value = m_state.alternateBase();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::base() const
{
    auto value = m_state.base();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::brightText() const
{
    auto value = m_state.brightText();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::button() const
{
    auto value = m_state.button();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::buttonText() const
{
    auto value = m_state.buttonText();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::dark() const
{
    auto value = m_state.dark();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::highlight() const
{
    auto value = m_state.highlight();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::highlightedText() const
{
    auto value = m_state.highlightedText();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::light() const
{
    auto value = m_state.light();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::link() const
{
    auto value = m_state.link();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::linkVisited() const
{
    auto value = m_state.linkVisited();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::mid() const
{
    auto value = m_state.mid();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::midlight() const
{
    auto value = m_state.midlight();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::placeholderText() const
{
    auto value = m_state.placeholderText();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::shadow() const
{
    auto value = m_state.shadow();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::text() const
{
    auto value = m_state.text();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::toolTipBase() const
{
    auto value = m_state.toolTipBase();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::toolTipText() const
{
    auto value = m_state.toolTipText();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::window() const
{
    auto value = m_state.window();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::windowText() const
{
    auto value = m_state.windowText();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::positive() const
{
    auto value = m_state.positive();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::neutral() const
{
    auto value = m_state.neutral();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue PalettePropertyGroup::negative() const
{
    auto value = m_state.negative();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QObject *PalettePropertyGroup::quickPalette() const
{
    return m_palette;
}

#include "moc_PalettePropertyGroup.cpp"
// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
// SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>
//
// This file is automatically generated from qml_group.cpp.j2.
// To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "LinePropertyGroup.h"

#include <QQmlEngine>

#include "QuickStyle.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

LinePropertyGroup::LinePropertyGroup(QuickStyle *style)
    : QObject()
    , m_style(style)
{
    m_image = std::make_unique<ImagePropertyGroup>(m_style);
}

void LinePropertyGroup::update(const LineProperty &newState)
{
    m_state = newState;
    Q_EMIT sizeChanged();
    Q_EMIT colorChanged();
    Q_EMIT styleChanged();
    m_image->update(newState.image().value_or(ImageProperty{}));

    Q_EMIT updated();
}

QJSValue LinePropertyGroup::size() const
{
    auto value = m_state.size();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue LinePropertyGroup::color() const
{
    auto value = m_state.color();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

QJSValue LinePropertyGroup::style() const
{
    auto value = m_state.style();
    if (value) {
        return m_style->engine()->toScriptValue(value.value());
    }

    return QJSValue(QJSValue::UndefinedValue);
}

ImagePropertyGroup *LinePropertyGroup::image() const
{
    return m_image.get();
}

#include "moc_LinePropertyGroup.cpp"
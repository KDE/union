// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "LinePropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

LinePropertyGroup::LinePropertyGroup()
{
    m_image = std::make_unique<ImagePropertyGroup>();
}

void LinePropertyGroup::update(const LineProperty &newState)
{
    m_size = newState.size().value_or(qreal{});
    m_color = newState.color().value_or(QColor{});
    m_style = newState.style().value_or(Union::Properties::LineStyle{});
    m_image->update(newState.image().value_or(ImageProperty{}));
}

qreal LinePropertyGroup::size() const
{
    return m_size;
}

void LinePropertyGroup::setSize(const qreal &newValue)
{
    m_size = newValue;
}

QBindable<qreal> LinePropertyGroup::bindableSize()
{
    return QBindable<qreal>(&m_size);
}

QColor LinePropertyGroup::color() const
{
    return m_color;
}

void LinePropertyGroup::setColor(const QColor &newValue)
{
    m_color = newValue;
}

QBindable<QColor> LinePropertyGroup::bindableColor()
{
    return QBindable<QColor>(&m_color);
}

Union::Properties::LineStyle LinePropertyGroup::style() const
{
    return m_style;
}

void LinePropertyGroup::setStyle(const Union::Properties::LineStyle &newValue)
{
    m_style = newValue;
}

QBindable<Union::Properties::LineStyle> LinePropertyGroup::bindableStyle()
{
    return QBindable<Union::Properties::LineStyle>(&m_style);
}

ImagePropertyGroup *LinePropertyGroup::image() const
{
    return m_image.get();
}

#include "moc_LinePropertyGroup.cpp"
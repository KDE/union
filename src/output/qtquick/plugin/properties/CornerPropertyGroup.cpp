// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "CornerPropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

CornerPropertyGroup::CornerPropertyGroup()
{
    m_image = std::make_unique<ImagePropertyGroup>();
}

void CornerPropertyGroup::update(const CornerProperty &newState)
{
    m_radius = newState.radius().value_or(qreal{});
    m_width = newState.width().value_or(qreal{});
    m_height = newState.height().value_or(qreal{});
    m_color = newState.color().value_or(QColor{});
    m_image->update(newState.image().value_or(ImageProperty{}));
}

qreal CornerPropertyGroup::radius() const
{
    return m_radius;
}

void CornerPropertyGroup::setRadius(const qreal &newValue)
{
    m_radius = newValue;
}

QBindable<qreal> CornerPropertyGroup::bindableRadius()
{
    return QBindable<qreal>(&m_radius);
}

qreal CornerPropertyGroup::width() const
{
    return m_width;
}

void CornerPropertyGroup::setWidth(const qreal &newValue)
{
    m_width = newValue;
}

QBindable<qreal> CornerPropertyGroup::bindableWidth()
{
    return QBindable<qreal>(&m_width);
}

qreal CornerPropertyGroup::height() const
{
    return m_height;
}

void CornerPropertyGroup::setHeight(const qreal &newValue)
{
    m_height = newValue;
}

QBindable<qreal> CornerPropertyGroup::bindableHeight()
{
    return QBindable<qreal>(&m_height);
}

QColor CornerPropertyGroup::color() const
{
    return m_color;
}

void CornerPropertyGroup::setColor(const QColor &newValue)
{
    m_color = newValue;
}

QBindable<QColor> CornerPropertyGroup::bindableColor()
{
    return QBindable<QColor>(&m_color);
}

ImagePropertyGroup *CornerPropertyGroup::image() const
{
    return m_image.get();
}

#include "moc_CornerPropertyGroup.cpp"
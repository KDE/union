// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "BackgroundPropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

BackgroundPropertyGroup::BackgroundPropertyGroup()
{
    m_image = std::make_unique<ImagePropertyGroup>();
    m_border = std::make_unique<BorderPropertyGroup>();
    m_corners = std::make_unique<CornersPropertyGroup>();
    m_shadow = std::make_unique<ShadowPropertyGroup>();
}

void BackgroundPropertyGroup::update(const BackgroundProperty &newState)
{
    m_color = newState.color().value_or(QColor{});
    m_image->update(newState.image().value_or(ImageProperty{}));
    m_border->update(newState.border().value_or(BorderProperty{}));
    m_corners->update(newState.corners().value_or(CornersProperty{}));
    m_shadow->update(newState.shadow().value_or(ShadowProperty{}));
}

QColor BackgroundPropertyGroup::color() const
{
    return m_color;
}

void BackgroundPropertyGroup::setColor(const QColor &newValue)
{
    m_color = newValue;
}

QBindable<QColor> BackgroundPropertyGroup::bindableColor()
{
    return QBindable<QColor>(&m_color);
}

ImagePropertyGroup *BackgroundPropertyGroup::image() const
{
    return m_image.get();
}

BorderPropertyGroup *BackgroundPropertyGroup::border() const
{
    return m_border.get();
}

CornersPropertyGroup *BackgroundPropertyGroup::corners() const
{
    return m_corners.get();
}

ShadowPropertyGroup *BackgroundPropertyGroup::shadow() const
{
    return m_shadow.get();
}

#include "moc_BackgroundPropertyGroup.cpp"
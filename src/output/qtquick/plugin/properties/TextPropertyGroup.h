// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `scripts/generate_properties.py`.

#pragma once

// clang-format off
#include <QObject>
#include <QProperty>
#include <qqmlregistration.h>

#include <QColor>
#include <QFont>
#include <QtGlobal>

#include <properties/TextProperty.h>

// clang-format on

class TextPropertyGroup : public QObject
{
    Q_OBJECT
    QML_ANONYMOUS

public:
    TextPropertyGroup();

    void update(const Union::Properties::TextProperty &newState);

    Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment BINDABLE bindableAlignment NOTIFY alignmentChanged)
    Qt::Alignment alignment() const;
    void setAlignment(const Qt::Alignment &newValue);
    QBindable<Qt::Alignment> bindableAlignment();
    Q_SIGNAL void alignmentChanged();

    Q_PROPERTY(QColor color READ color WRITE setColor BINDABLE bindableColor NOTIFY colorChanged)
    QColor color() const;
    void setColor(const QColor &newValue);
    QBindable<QColor> bindableColor();
    Q_SIGNAL void colorChanged();

    Q_PROPERTY(QFont font READ font WRITE setFont BINDABLE bindableFont NOTIFY fontChanged)
    QFont font() const;
    void setFont(const QFont &newValue);
    QBindable<QFont> bindableFont();
    Q_SIGNAL void fontChanged();

private:
    Q_OBJECT_BINDABLE_PROPERTY(TextPropertyGroup, Qt::Alignment, m_alignment, &TextPropertyGroup::alignmentChanged)
    Q_OBJECT_BINDABLE_PROPERTY(TextPropertyGroup, QColor, m_color, &TextPropertyGroup::colorChanged)
    Q_OBJECT_BINDABLE_PROPERTY(TextPropertyGroup, QFont, m_font, &TextPropertyGroup::fontChanged)
};
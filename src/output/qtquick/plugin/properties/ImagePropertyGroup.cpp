// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#include "ImagePropertyGroup.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

ImagePropertyGroup::ImagePropertyGroup()
{
}

void ImagePropertyGroup::update(const ImageProperty &newState)
{
    m_imageData = newState.imageData().value_or(QImage{});
    m_width = newState.width().value_or(qreal{});
    m_height = newState.height().value_or(qreal{});
    m_xOffset = newState.xOffset().value_or(qreal{});
    m_yOffset = newState.yOffset().value_or(qreal{});
    m_flags = newState.flags().value_or(Union::Properties::ImageFlags{});
}

QImage ImagePropertyGroup::imageData() const
{
    return m_imageData;
}

void ImagePropertyGroup::setImageData(const QImage &newValue)
{
    m_imageData = newValue;
}

QBindable<QImage> ImagePropertyGroup::bindableImageData()
{
    return QBindable<QImage>(&m_imageData);
}

qreal ImagePropertyGroup::width() const
{
    return m_width;
}

void ImagePropertyGroup::setWidth(const qreal &newValue)
{
    m_width = newValue;
}

QBindable<qreal> ImagePropertyGroup::bindableWidth()
{
    return QBindable<qreal>(&m_width);
}

qreal ImagePropertyGroup::height() const
{
    return m_height;
}

void ImagePropertyGroup::setHeight(const qreal &newValue)
{
    m_height = newValue;
}

QBindable<qreal> ImagePropertyGroup::bindableHeight()
{
    return QBindable<qreal>(&m_height);
}

qreal ImagePropertyGroup::xOffset() const
{
    return m_xOffset;
}

void ImagePropertyGroup::setXOffset(const qreal &newValue)
{
    m_xOffset = newValue;
}

QBindable<qreal> ImagePropertyGroup::bindableXOffset()
{
    return QBindable<qreal>(&m_xOffset);
}

qreal ImagePropertyGroup::yOffset() const
{
    return m_yOffset;
}

void ImagePropertyGroup::setYOffset(const qreal &newValue)
{
    m_yOffset = newValue;
}

QBindable<qreal> ImagePropertyGroup::bindableYOffset()
{
    return QBindable<qreal>(&m_yOffset);
}

Union::Properties::ImageFlags ImagePropertyGroup::flags() const
{
    return m_flags;
}

void ImagePropertyGroup::setFlags(const Union::Properties::ImageFlags &newValue)
{
    m_flags = newValue;
}

QBindable<Union::Properties::ImageFlags> ImagePropertyGroup::bindableFlags()
{
    return QBindable<Union::Properties::ImageFlags>(&m_flags);
}

#include "moc_ImagePropertyGroup.cpp"
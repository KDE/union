// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `generate_properties.py`.

#include "IndicatorProperty.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

class Union::Properties::IndicatorPropertyPrivate
{
public:
    std::optional<qreal> width;
    std::optional<qreal> height;
    std::optional<Qt::Alignment> alignment;
};

IndicatorProperty::IndicatorProperty()
    : d(std::make_unique<IndicatorPropertyPrivate>())
{
}

IndicatorProperty::IndicatorProperty(const IndicatorProperty &other)
    : d(std::make_unique<IndicatorPropertyPrivate>())
{
    d->width = other.d->width;
    d->height = other.d->height;
    d->alignment = other.d->alignment;
}

IndicatorProperty::IndicatorProperty(IndicatorProperty &&other)
    : d(std::move(other.d))
{
}

IndicatorProperty::~IndicatorProperty() = default;

IndicatorProperty &IndicatorProperty::operator=(const IndicatorProperty &other)
{
    if (this != &other) {
        d->width = other.d->width;
        d->height = other.d->height;
        d->alignment = other.d->alignment;
    }
    return *this;
}

IndicatorProperty &IndicatorProperty::operator=(IndicatorProperty &&other)
{
    std::swap(d, other.d);
    return *this;
}

std::optional<qreal> IndicatorProperty::width() const
{
    return d->width;
}

void IndicatorProperty::setWidth(const std::optional<qreal> &newValue)
{
    if (newValue == d->width) {
        return;
    }

    d->width = newValue;
}
std::optional<qreal> IndicatorProperty::height() const
{
    return d->height;
}

void IndicatorProperty::setHeight(const std::optional<qreal> &newValue)
{
    if (newValue == d->height) {
        return;
    }

    d->height = newValue;
}
std::optional<Qt::Alignment> IndicatorProperty::alignment() const
{
    return d->alignment;
}

void IndicatorProperty::setAlignment(const std::optional<Qt::Alignment> &newValue)
{
    if (newValue == d->alignment) {
        return;
    }

    d->alignment = newValue;
}

bool IndicatorProperty::hasAnyValue() const
{
    if (d->width.has_value()) {
        return true;
    }
    if (d->height.has_value()) {
        return true;
    }
    if (d->alignment.has_value()) {
        return true;
    }
    return false;
}

void IndicatorProperty::resolveProperties(const IndicatorProperty &source, IndicatorProperty &destination)
{
    if (!destination.d->width.has_value()) {
        destination.d->width = source.d->width;
    }
    if (!destination.d->height.has_value()) {
        destination.d->height = source.d->height;
    }
    if (!destination.d->alignment.has_value()) {
        destination.d->alignment = source.d->alignment;
    }
}

bool Union::Properties::operator==(const IndicatorProperty &left, const IndicatorProperty &right)
{
    if (left.width() != right.width()) {
        return false;
    }
    if (left.height() != right.height()) {
        return false;
    }
    if (left.alignment() != right.alignment()) {
        return false;
    }
    return true;
}

QDebug operator<<(QDebug debug, const Union::Properties::IndicatorProperty &type)
{
    QDebugStateSaver saver(debug);
    debug << "IndicatorProperty(";
    debug << "  width:" << type.width();
    debug << "  height:" << type.height();
    debug << "  alignment:" << type.alignment();
    debug << ")";
    return debug;
}
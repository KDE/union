// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
// SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>
//
// This file is automatically generated from property.h.j2.
// To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>


#include "CornerProperty.h"

#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class CornersPropertyPrivate;

class UNION_EXPORT CornersProperty
{
public:
    CornersProperty();
    CornersProperty(const CornersProperty &other);
    CornersProperty(CornersProperty &&other);
    ~CornersProperty();

    CornersProperty &operator=(const CornersProperty &other);
    CornersProperty &operator=(CornersProperty &&other);

    std::optional<CornerProperty> topLeft() const;
    void setTopLeft(const std::optional<CornerProperty> &newValue);

    std::optional<CornerProperty> topRight() const;
    void setTopRight(const std::optional<CornerProperty> &newValue);

    std::optional<CornerProperty> bottomLeft() const;
    void setBottomLeft(const std::optional<CornerProperty> &newValue);

    std::optional<CornerProperty> bottomRight() const;
    void setBottomRight(const std::optional<CornerProperty> &newValue);

    /**
     * Check if this property has any value set.
     *
     * Note that for any sub property that this property has, it also checks if
     * that sub-property has any value.
     */
    bool hasAnyValue() const;

    /**
     * Copy values from source to destination if destination does not have a value.
     *
     * This will recursively copy sub-values.
     *
     * \param source The source property to copy from.
     * \param destination The destination property to copy to.
     */
    static void resolveProperties(const CornersProperty &source, CornersProperty &destination);

    /**
     * Create and return an empty CornersProperty instance.
     *
     * This will create an empty CornersProperty instance, which is defined as
     * an instance with all of its values default-constructed. Note that this is
     * different from a default-constructed instance which will have all its
     * values unset.
     */
    static CornersProperty empty();

private:
    std::unique_ptr<CornersPropertyPrivate> d;
};

UNION_EXPORT bool operator==(const CornersProperty &left, const CornersProperty &right);
UNION_EXPORT inline bool operator!=(const CornersProperty &left, const CornersProperty &right)
{
    return !(left == right);
}

}
}

UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::CornersProperty &type);
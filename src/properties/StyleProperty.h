// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
// SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>
//
// This file is automatically generated from property.h.j2.
// To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>


#include "BackgroundProperty.h"
#include "IconProperty.h"
#include "LayoutProperty.h"
#include "PaletteProperty.h"
#include "TextProperty.h"

#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class StylePropertyPrivate;

class UNION_EXPORT StyleProperty
{
public:
    StyleProperty();
    StyleProperty(const StyleProperty &other);
    StyleProperty(StyleProperty &&other);
    ~StyleProperty();

    StyleProperty &operator=(const StyleProperty &other);
    StyleProperty &operator=(StyleProperty &&other);

    std::optional<PaletteProperty> palette() const;
    void setPalette(const std::optional<PaletteProperty> &newValue);

    std::optional<LayoutProperty> layout() const;
    void setLayout(const std::optional<LayoutProperty> &newValue);

    std::optional<TextProperty> text() const;
    void setText(const std::optional<TextProperty> &newValue);

    std::optional<IconProperty> icon() const;
    void setIcon(const std::optional<IconProperty> &newValue);

    std::optional<BackgroundProperty> background() const;
    void setBackground(const std::optional<BackgroundProperty> &newValue);

    /**
     * Check if this property has any value set.
     *
     * Note that for any sub property that this property has, it also checks if
     * that sub-property has any value.
     */
    bool hasAnyValue() const;

    /**
     * Copy values from source to destination if destination does not have a value.
     *
     * This will recursively copy sub-values.
     *
     * \param source The source property to copy from.
     * \param destination The destination property to copy to.
     */
    static void resolveProperties(const StyleProperty &source, StyleProperty &destination);

    /**
     * Create and return an empty StyleProperty instance.
     *
     * This will create an empty StyleProperty instance, which is defined as
     * an instance with all of its values default-constructed. Note that this is
     * different from a default-constructed instance which will have all its
     * values unset.
     */
    static StyleProperty empty();

private:
    std::unique_ptr<StylePropertyPrivate> d;
};

UNION_EXPORT bool operator==(const StyleProperty &left, const StyleProperty &right);
UNION_EXPORT inline bool operator!=(const StyleProperty &left, const StyleProperty &right)
{
    return !(left == right);
}

}
}

UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::StyleProperty &type);
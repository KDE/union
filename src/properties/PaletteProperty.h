// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>

#include <QColor>


#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class PalettePropertyPrivate;

class UNION_EXPORT PaletteProperty
{
public:
    PaletteProperty();
    PaletteProperty(const PaletteProperty &other);
    PaletteProperty(PaletteProperty &&other);
    ~PaletteProperty();

    PaletteProperty &operator=(const PaletteProperty &other);
    PaletteProperty &operator=(PaletteProperty &&other);

    std::optional<QColor> foreground() const;
    void setForeground(const std::optional<QColor> &newValue);

    std::optional<QColor> background() const;
    void setBackground(const std::optional<QColor> &newValue);

    std::optional<QColor> decoration() const;
    void setDecoration(const std::optional<QColor> &newValue);

    /**
     * Check if this property has any value set.
     *
     * Note that for any sub property that this property has, it also checks if
     * that sub-property has any value.
     */
    bool hasAnyValue() const;

    /**
     * Copy values from source to destination if destination does not have a value.
     *
     * This will recursively copy sub-values.
     *
     * \param source The source property to copy from.
     * \param destination The destination property to copy to.
     */
    static void resolveProperties(const PaletteProperty &source, PaletteProperty &destination);

private:
    std::unique_ptr<PalettePropertyPrivate> d;
};

UNION_EXPORT bool operator==(const PaletteProperty &left, const PaletteProperty &right);
UNION_EXPORT inline bool operator!=(const PaletteProperty &left, const PaletteProperty &right)
{
    return !(left == right);
}

}
}

UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::PaletteProperty &type);
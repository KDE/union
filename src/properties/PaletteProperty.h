// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
// SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>
//
// This file is automatically generated from property.h.j2.
// To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>

#include <QColor>


#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class PalettePropertyPrivate;

/*!
\class Union::Properties::PaletteProperty
\inmodule core
\ingroup core-properties

\brief A collection of colors to be used for coloring an element.

*/
class UNION_EXPORT PaletteProperty
{
public:
    /*!
     * Default constructor. Constructs a null instance.
     *
     * A null instance in this case means an instance that does not have any
     * values for its properties. This includes property groups.
     */
    PaletteProperty();
    /*!
     * Copy constructor.
     */
    PaletteProperty(const PaletteProperty &other);
    /*!
     * Move constructor.
     */
    PaletteProperty(PaletteProperty &&other);
    ~PaletteProperty();

    /*!
     * Copy assignment operator.
     */
    PaletteProperty &operator=(const PaletteProperty &other);
    /*!
     * Move assignment operator.
     */
    PaletteProperty &operator=(PaletteProperty &&other);

    /*!
     * Returns the value of accent.
     */
    std::optional<QColor> accent() const;
    /*!
     * Set the value of accent.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setAccent(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of alternateBase.
     */
    std::optional<QColor> alternateBase() const;
    /*!
     * Set the value of alternateBase.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setAlternateBase(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of base.
     */
    std::optional<QColor> base() const;
    /*!
     * Set the value of base.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setBase(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of brightText.
     */
    std::optional<QColor> brightText() const;
    /*!
     * Set the value of brightText.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setBrightText(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of button.
     */
    std::optional<QColor> button() const;
    /*!
     * Set the value of button.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setButton(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of buttonText.
     */
    std::optional<QColor> buttonText() const;
    /*!
     * Set the value of buttonText.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setButtonText(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of dark.
     */
    std::optional<QColor> dark() const;
    /*!
     * Set the value of dark.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setDark(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of highlight.
     */
    std::optional<QColor> highlight() const;
    /*!
     * Set the value of highlight.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setHighlight(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of highlightedText.
     */
    std::optional<QColor> highlightedText() const;
    /*!
     * Set the value of highlightedText.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setHighlightedText(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of light.
     */
    std::optional<QColor> light() const;
    /*!
     * Set the value of light.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setLight(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of link.
     */
    std::optional<QColor> link() const;
    /*!
     * Set the value of link.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setLink(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of linkVisited.
     */
    std::optional<QColor> linkVisited() const;
    /*!
     * Set the value of linkVisited.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setLinkVisited(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of mid.
     */
    std::optional<QColor> mid() const;
    /*!
     * Set the value of mid.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setMid(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of midlight.
     */
    std::optional<QColor> midlight() const;
    /*!
     * Set the value of midlight.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setMidlight(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of placeholderText.
     */
    std::optional<QColor> placeholderText() const;
    /*!
     * Set the value of placeholderText.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setPlaceholderText(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of shadow.
     */
    std::optional<QColor> shadow() const;
    /*!
     * Set the value of shadow.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setShadow(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of text.
     */
    std::optional<QColor> text() const;
    /*!
     * Set the value of text.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setText(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of toolTipBase.
     */
    std::optional<QColor> toolTipBase() const;
    /*!
     * Set the value of toolTipBase.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setToolTipBase(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of toolTipText.
     */
    std::optional<QColor> toolTipText() const;
    /*!
     * Set the value of toolTipText.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setToolTipText(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of window.
     */
    std::optional<QColor> window() const;
    /*!
     * Set the value of window.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setWindow(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of windowText.
     */
    std::optional<QColor> windowText() const;
    /*!
     * Set the value of windowText.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setWindowText(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of positive.
     */
    std::optional<QColor> positive() const;
    /*!
     * Set the value of positive.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setPositive(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of neutral.
     */
    std::optional<QColor> neutral() const;
    /*!
     * Set the value of neutral.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setNeutral(const std::optional<QColor> &newValue);

    /*!
     * Returns the value of negative.
     */
    std::optional<QColor> negative() const;
    /*!
     * Set the value of negative.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setNegative(const std::optional<QColor> &newValue);

    /*!
     * Returns if this property group has any value set.
     *
     * Note that for any property that is also a property group, this will also
     * check if that group has any value.
     */
    bool hasAnyValue() const;

    /*!
     * Copy property values from source to destination if destination does not have a property value.
     *
     * This will recursively copy property values of grouped properties.
     *
     * \a source      The source property group to copy from.
     * \a destination The destination property group to copy to.
     */
    static void resolveProperties(const PaletteProperty &source, PaletteProperty &destination);

    /*!
     * Create and return an empty PaletteProperty instance.
     *
     * This will create an empty PaletteProperty instance, which is defined as
     * an instance with all of its values default-constructed. Note that this is
     * different from a default-constructed instance which will have all its
     * values unset.
     */
    static PaletteProperty empty();

private:
    std::unique_ptr<PalettePropertyPrivate> d;
};

/*!
 * \relates Union::Properties::PaletteProperty
 * Equality comparison for PaletteProperty.
 */
UNION_EXPORT bool operator==(const PaletteProperty &left, const PaletteProperty &right);
}
}

/*!
 * \relates Union::Properties::PaletteProperty
 * QDebug support for PaletteProperty.
 */
UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::PaletteProperty &type);
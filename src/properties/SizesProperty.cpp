// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `generate_properties.py`.

#include "SizesProperty.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

class Union::Properties::SizesPropertyPrivate
{
public:
    std::optional<qreal> width;
    std::optional<qreal> height;
    std::optional<qreal> spacing;
    std::optional<SizeProperty> padding;
    std::optional<SizeProperty> margins;
};

SizesProperty::SizesProperty()
    : d(std::make_unique<SizesPropertyPrivate>())
{
}

SizesProperty::SizesProperty(const SizesProperty &other)
    : d(std::make_unique<SizesPropertyPrivate>())
{
    d->width = other.d->width;
    d->height = other.d->height;
    d->spacing = other.d->spacing;
    d->padding = other.d->padding;
    d->margins = other.d->margins;
}

SizesProperty::SizesProperty(SizesProperty &&other)
    : d(std::move(other.d))
{
}

SizesProperty::~SizesProperty() = default;

SizesProperty &SizesProperty::operator=(const SizesProperty &other)
{
    if (this != &other) {
        d->width = other.d->width;
        d->height = other.d->height;
        d->spacing = other.d->spacing;
        d->padding = other.d->padding;
        d->margins = other.d->margins;
    }
    return *this;
}

SizesProperty &SizesProperty::operator=(SizesProperty &&other)
{
    std::swap(d, other.d);
    return *this;
}

std::optional<qreal> SizesProperty::width() const
{
    return d->width;
}

void SizesProperty::setWidth(const std::optional<qreal> &newValue)
{
    if (newValue == d->width) {
        return;
    }

    d->width = newValue;
}
std::optional<qreal> SizesProperty::height() const
{
    return d->height;
}

void SizesProperty::setHeight(const std::optional<qreal> &newValue)
{
    if (newValue == d->height) {
        return;
    }

    d->height = newValue;
}
std::optional<qreal> SizesProperty::spacing() const
{
    return d->spacing;
}

void SizesProperty::setSpacing(const std::optional<qreal> &newValue)
{
    if (newValue == d->spacing) {
        return;
    }

    d->spacing = newValue;
}
std::optional<SizeProperty> SizesProperty::padding() const
{
    return d->padding;
}

void SizesProperty::setPadding(const std::optional<SizeProperty> &newValue)
{
    if (newValue == d->padding) {
        return;
    }

    d->padding = newValue;
}
std::optional<SizeProperty> SizesProperty::margins() const
{
    return d->margins;
}

void SizesProperty::setMargins(const std::optional<SizeProperty> &newValue)
{
    if (newValue == d->margins) {
        return;
    }

    d->margins = newValue;
}

bool SizesProperty::hasAnyValue() const
{
    if (d->width.has_value()) {
        return true;
    }
    if (d->height.has_value()) {
        return true;
    }
    if (d->spacing.has_value()) {
        return true;
    }
    if (d->padding.has_value() && d->padding->hasAnyValue()) {
        return true;
    }
    if (d->margins.has_value() && d->margins->hasAnyValue()) {
        return true;
    }
    return false;
}

void SizesProperty::resolveProperties(const SizesProperty &source, SizesProperty &destination)
{
    if (!destination.d->width.has_value()) {
        destination.d->width = source.d->width;
    }
    if (!destination.d->height.has_value()) {
        destination.d->height = source.d->height;
    }
    if (!destination.d->spacing.has_value()) {
        destination.d->spacing = source.d->spacing;
    }
    if (source.d->padding.has_value()) {
        SizeProperty value;
        if (destination.d->padding.has_value()) {
            value = destination.d->padding.value();
        }
        SizeProperty::resolveProperties(source.d->padding.value(), value);
        if (value.hasAnyValue()) {
            destination.d->padding = value;
        }
    }
    if (source.d->margins.has_value()) {
        SizeProperty value;
        if (destination.d->margins.has_value()) {
            value = destination.d->margins.value();
        }
        SizeProperty::resolveProperties(source.d->margins.value(), value);
        if (value.hasAnyValue()) {
            destination.d->margins = value;
        }
    }
}

bool Union::Properties::operator==(const SizesProperty &left, const SizesProperty &right)
{
    if (left.width() != right.width()) {
        return false;
    }
    if (left.height() != right.height()) {
        return false;
    }
    if (left.spacing() != right.spacing()) {
        return false;
    }
    if (left.padding() != right.padding()) {
        return false;
    }
    if (left.margins() != right.margins()) {
        return false;
    }
    return true;
}

QDebug operator<<(QDebug debug, const Union::Properties::SizesProperty &type)
{
    QDebugStateSaver saver(debug);
    debug << "SizesProperty(";
    debug << "  width:" << type.width();
    debug << "  height:" << type.height();
    debug << "  spacing:" << type.spacing();
    debug << "  padding:" << type.padding();
    debug << "  margins:" << type.margins();
    debug << ")";
    return debug;
}
// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `generate_properties.py`.

#include <QtTest>

#include "../StyleProperty.h"

#include "CreateTestInstances.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

class TestStyleProperty : public QObject
{
    Q_OBJECT
private Q_SLOTS:
    void testEmpty()
    {
        StyleProperty property;

        // An empty instance should have no values set.
        QVERIFY(!property.palette().has_value());
        QVERIFY(!property.sizes().has_value());
        QVERIFY(!property.text().has_value());
        QVERIFY(!property.indicator().has_value());
        QVERIFY(!property.background().has_value());
    }

    void testHasAnyValue()
    {
        StyleProperty property;

        // An empty instance should not have any values.
        QVERIFY(!property.hasAnyValue());

        {
            // Assigning an empty property to a value should have no effect.
            property.setPalette(PaletteProperty{});
            QVERIFY(!property.hasAnyValue());

            property.setPalette(testPalettePropertyInstance());
            QVERIFY(property.hasAnyValue());

            property.setPalette(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
        {
            // Assigning an empty property to a value should have no effect.
            property.setSizes(SizesProperty{});
            QVERIFY(!property.hasAnyValue());

            property.setSizes(testSizesPropertyInstance());
            QVERIFY(property.hasAnyValue());

            property.setSizes(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
        {
            // Assigning an empty property to a value should have no effect.
            property.setText(TextProperty{});
            QVERIFY(!property.hasAnyValue());

            property.setText(testTextPropertyInstance());
            QVERIFY(property.hasAnyValue());

            property.setText(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
        {
            // Assigning an empty property to a value should have no effect.
            property.setIndicator(IndicatorProperty{});
            QVERIFY(!property.hasAnyValue());

            property.setIndicator(testIndicatorPropertyInstance());
            QVERIFY(property.hasAnyValue());

            property.setIndicator(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
        {
            // Assigning an empty property to a value should have no effect.
            property.setBackground(BackgroundProperty{});
            QVERIFY(!property.hasAnyValue());

            property.setBackground(testBackgroundPropertyInstance());
            QVERIFY(property.hasAnyValue());

            property.setBackground(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
    }

    void testResolveProperties()
    {
        StyleProperty source;
        StyleProperty destination;

        QVERIFY(!source.hasAnyValue());
        QVERIFY(!destination.hasAnyValue());

        // Calling resolve on empty source and destination should have no effect.
        StyleProperty::resolveProperties(source, destination);

        QVERIFY(!destination.hasAnyValue());

        source.setPalette(testPalettePropertyInstance());
        source.setSizes(testSizesPropertyInstance());
        source.setText(testTextPropertyInstance());
        source.setIndicator(testIndicatorPropertyInstance());
        source.setBackground(testBackgroundPropertyInstance());

        QVERIFY(source.hasAnyValue());
        QVERIFY(!destination.hasAnyValue());

        StyleProperty::resolveProperties(source, destination);

        QVERIFY(destination.hasAnyValue());

        QCOMPARE(destination.palette(), source.palette());
        QCOMPARE(destination.sizes(), source.sizes());
        QCOMPARE(destination.text(), source.text());
        QCOMPARE(destination.indicator(), source.indicator());
        QCOMPARE(destination.background(), source.background());
    }
};

QTEST_MAIN(TestStyleProperty)

#include "TestStyleProperty.moc"
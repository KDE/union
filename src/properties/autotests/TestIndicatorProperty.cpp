// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `generate_properties.py`.

#include <QtTest>

#include "../IndicatorProperty.h"

#include "CreateTestInstances.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

class TestIndicatorProperty : public QObject
{
    Q_OBJECT
private Q_SLOTS:
    void testEmpty()
    {
        IndicatorProperty property;

        // An empty instance should have no values set.
        QVERIFY(!property.width().has_value());
        QVERIFY(!property.height().has_value());
        QVERIFY(!property.alignment().has_value());
    }

    void testHasAnyValue()
    {
        IndicatorProperty property;

        // An empty instance should not have any values.
        QVERIFY(!property.hasAnyValue());

        {
            qreal value;
            property.setWidth(value);
            QVERIFY(property.hasAnyValue());
            property.setWidth(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
        {
            qreal value;
            property.setHeight(value);
            QVERIFY(property.hasAnyValue());
            property.setHeight(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
        {
            Qt::Alignment value;
            property.setAlignment(value);
            QVERIFY(property.hasAnyValue());
            property.setAlignment(std::nullopt);
            QVERIFY(!property.hasAnyValue());
        }
    }

    void testResolveProperties()
    {
        IndicatorProperty source;
        IndicatorProperty destination;

        QVERIFY(!source.hasAnyValue());
        QVERIFY(!destination.hasAnyValue());

        // Calling resolve on empty source and destination should have no effect.
        IndicatorProperty::resolveProperties(source, destination);

        QVERIFY(!destination.hasAnyValue());

        source.setWidth(qreal{});
        source.setHeight(qreal{});
        source.setAlignment(Qt::Alignment{});

        QVERIFY(source.hasAnyValue());
        QVERIFY(!destination.hasAnyValue());

        IndicatorProperty::resolveProperties(source, destination);

        QVERIFY(destination.hasAnyValue());

        QCOMPARE(destination.width(), source.width());
        QCOMPARE(destination.height(), source.height());
        QCOMPARE(destination.alignment(), source.alignment());
    }
};

QTEST_MAIN(TestIndicatorProperty)

#include "TestIndicatorProperty.moc"
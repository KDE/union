// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
// SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>
//
// This file is automatically generated from property.h.j2.
// To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>


#include "LineProperty.h"

#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class BorderPropertyPrivate;

/*!
\class Union::Properties::BorderProperty
\inmodule core
\ingroup core-properties

\brief A property group containing properties of an element's border.

*/
class UNION_EXPORT BorderProperty
{
public:
    /*!
     * Default constructor. Constructs a null instance.
     *
     * A null instance in this case means an instance that does not have any
     * values for its properties. This includes property groups.
     */
    BorderProperty();
    /*!
     * Copy constructor.
     */
    BorderProperty(const BorderProperty &other);
    /*!
     * Move constructor.
     */
    BorderProperty(BorderProperty &&other);
    ~BorderProperty();

    /*!
     * Copy assignment operator.
     */
    BorderProperty &operator=(const BorderProperty &other);
    /*!
     * Move assignment operator.
     */
    BorderProperty &operator=(BorderProperty &&other);

    /*!
     * Returns the value of left.
     */
    std::optional<LineProperty> left() const;
    /*!
     * Returns left if set or a new LineProperty if not.
     */
    LineProperty left_or_new() const;
    /*!
     * Set the value of left.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setLeft(const std::optional<LineProperty> &newValue);

    /*!
     * Returns the value of right.
     */
    std::optional<LineProperty> right() const;
    /*!
     * Returns right if set or a new LineProperty if not.
     */
    LineProperty right_or_new() const;
    /*!
     * Set the value of right.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setRight(const std::optional<LineProperty> &newValue);

    /*!
     * Returns the value of top.
     */
    std::optional<LineProperty> top() const;
    /*!
     * Returns top if set or a new LineProperty if not.
     */
    LineProperty top_or_new() const;
    /*!
     * Set the value of top.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setTop(const std::optional<LineProperty> &newValue);

    /*!
     * Returns the value of bottom.
     */
    std::optional<LineProperty> bottom() const;
    /*!
     * Returns bottom if set or a new LineProperty if not.
     */
    LineProperty bottom_or_new() const;
    /*!
     * Set the value of bottom.
     *
     * \a newValue The new value or \c{std::nullopt} to unset the value.
     */
    void setBottom(const std::optional<LineProperty> &newValue);

    /*!
     * Returns if this property group has any value set.
     *
     * Note that for any property that is also a property group, this will also
     * check if that group has any value.
     */
    bool hasAnyValue() const;

    /*!
     * Copy property values from source to destination if destination does not have a property value.
     *
     * This will recursively copy property values of grouped properties.
     *
     * \a source      The source property group to copy from.
     * \a destination The destination property group to copy to.
     */
    static void resolveProperties(const BorderProperty &source, BorderProperty &destination);

    /*!
     * Create and return an empty BorderProperty instance.
     *
     * This will create an empty BorderProperty instance, which is defined as
     * an instance with all of its values default-constructed. Note that this is
     * different from a default-constructed instance which will have all its
     * values unset.
     */
    static BorderProperty empty();

private:
    std::unique_ptr<BorderPropertyPrivate> d;
};

/*!
 * \relates Union::Properties::BorderProperty
 * Equality comparison for BorderProperty.
 */
UNION_EXPORT bool operator==(const BorderProperty &left, const BorderProperty &right);
}
}

/*!
 * \relates Union::Properties::BorderProperty
 * QDebug support for BorderProperty.
 */
UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::BorderProperty &type);
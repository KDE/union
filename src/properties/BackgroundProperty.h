// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>

#include <QColor>

#include "BorderProperty.h"
#include "CornersProperty.h"
#include "ImageProperty.h"
#include "ShadowProperty.h"

#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class BackgroundPropertyPrivate;

class UNION_EXPORT BackgroundProperty
{
public:
    BackgroundProperty();
    BackgroundProperty(const BackgroundProperty &other);
    BackgroundProperty(BackgroundProperty &&other);
    ~BackgroundProperty();

    BackgroundProperty &operator=(const BackgroundProperty &other);
    BackgroundProperty &operator=(BackgroundProperty &&other);

    std::optional<QColor> color() const;
    void setColor(const std::optional<QColor> &newValue);

    std::optional<ImageProperty> image() const;
    void setImage(const std::optional<ImageProperty> &newValue);

    std::optional<BorderProperty> border() const;
    void setBorder(const std::optional<BorderProperty> &newValue);

    std::optional<CornersProperty> corners() const;
    void setCorners(const std::optional<CornersProperty> &newValue);

    std::optional<ShadowProperty> shadow() const;
    void setShadow(const std::optional<ShadowProperty> &newValue);

    /**
     * Check if this property has any value set.
     *
     * Note that for any sub property that this property has, it also checks if
     * that sub-property has any value.
     */
    bool hasAnyValue() const;

    /**
     * Copy values from source to destination if destination does not have a value.
     *
     * This will recursively copy sub-values.
     *
     * \param source The source property to copy from.
     * \param destination The destination property to copy to.
     */
    static void resolveProperties(const BackgroundProperty &source, BackgroundProperty &destination);

private:
    std::unique_ptr<BackgroundPropertyPrivate> d;
};

UNION_EXPORT bool operator==(const BackgroundProperty &left, const BackgroundProperty &right);
UNION_EXPORT inline bool operator!=(const BackgroundProperty &left, const BackgroundProperty &right)
{
    return !(left == right);
}

}
}

UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::BackgroundProperty &type);
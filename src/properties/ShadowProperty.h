// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>


#include "CornerProperty.h"
#include "LineProperty.h"
#include "SizeProperty.h"

#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class ShadowPropertyPrivate;

class UNION_EXPORT ShadowProperty
{
public:
    ShadowProperty();
    ShadowProperty(const ShadowProperty &other);
    ShadowProperty(ShadowProperty &&other);
    ~ShadowProperty();

    ShadowProperty &operator=(const ShadowProperty &other);
    ShadowProperty &operator=(ShadowProperty &&other);

    std::optional<SizeProperty> offsets() const;
    void setOffsets(const std::optional<SizeProperty> &newValue);

    std::optional<LineProperty> left() const;
    void setLeft(const std::optional<LineProperty> &newValue);

    std::optional<LineProperty> right() const;
    void setRight(const std::optional<LineProperty> &newValue);

    std::optional<LineProperty> top() const;
    void setTop(const std::optional<LineProperty> &newValue);

    std::optional<LineProperty> bottom() const;
    void setBottom(const std::optional<LineProperty> &newValue);

    std::optional<CornerProperty> topLeft() const;
    void setTopLeft(const std::optional<CornerProperty> &newValue);

    std::optional<CornerProperty> topRight() const;
    void setTopRight(const std::optional<CornerProperty> &newValue);

    std::optional<CornerProperty> bottomLeft() const;
    void setBottomLeft(const std::optional<CornerProperty> &newValue);

    std::optional<CornerProperty> bottomRight() const;
    void setBottomRight(const std::optional<CornerProperty> &newValue);

    /**
     * Check if this property has any value set.
     *
     * Note that for any sub property that this property has, it also checks if
     * that sub-property has any value.
     */
    bool hasAnyValue() const;

    /**
     * Copy values from source to destination if destination does not have a value.
     *
     * This will recursively copy sub-values.
     *
     * \param source The source property to copy from.
     * \param destination The destination property to copy to.
     */
    static void resolveProperties(const ShadowProperty &source, ShadowProperty &destination);

    /**
     * Create and return an empty ShadowProperty instance.
     *
     * This will create an empty ShadowProperty instance, which is defined as
     * an instance with all of its values default-constructed. Note that this is
     * different from a default-constructed instance which will have all its
     * values unset.
     */
    static ShadowProperty empty();

private:
    std::unique_ptr<ShadowPropertyPrivate> d;
};

UNION_EXPORT bool operator==(const ShadowProperty &left, const ShadowProperty &right);
UNION_EXPORT inline bool operator!=(const ShadowProperty &left, const ShadowProperty &right)
{
    return !(left == right);
}

}
}

UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::ShadowProperty &type);
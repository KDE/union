// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `generate_properties.py`.

#pragma once

// clang-format off

#include <QDebug>


#include "SizeProperty.h"

#include "union_export.h"

// clang-format on

namespace Union
{
namespace Properties
{

class SizesPropertyPrivate;

class UNION_EXPORT SizesProperty
{
public:
    SizesProperty();
    SizesProperty(const SizesProperty &other);
    SizesProperty(SizesProperty &&other);
    ~SizesProperty();

    SizesProperty &operator=(const SizesProperty &other);
    SizesProperty &operator=(SizesProperty &&other);

    std::optional<qreal> width() const;
    void setWidth(const std::optional<qreal> &newValue);

    std::optional<qreal> height() const;
    void setHeight(const std::optional<qreal> &newValue);

    std::optional<qreal> spacing() const;
    void setSpacing(const std::optional<qreal> &newValue);

    std::optional<SizeProperty> padding() const;
    void setPadding(const std::optional<SizeProperty> &newValue);

    std::optional<SizeProperty> margins() const;
    void setMargins(const std::optional<SizeProperty> &newValue);

    /**
     * Check if this property has any value set.
     *
     * Note that for any sub property that this property has, it also checks if
     * that sub-property has any value.
     */
    bool hasAnyValue() const;

    /**
     * Copy values from source to destination if destination does not have a value.
     *
     * This will recursively copy sub-values.
     *
     * \param source The source property to copy from.
     * \param destination The destination property to copy to.
     */
    static void resolveProperties(const SizesProperty &source, SizesProperty &destination);

private:
    std::unique_ptr<SizesPropertyPrivate> d;
};

UNION_EXPORT bool operator==(const SizesProperty &left, const SizesProperty &right);
UNION_EXPORT inline bool operator!=(const SizesProperty &left, const SizesProperty &right)
{
    return !(left == right);
}

}
}

UNION_EXPORT QDebug operator<<(QDebug debug, const Union::Properties::SizesProperty &type);
{#
SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>

This is the template that is used to generate property class implementations.

REUSE-IgnoreStart
#}
// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
// SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>
//
// This file is automatically generated from property.cpp.j2.
// To regenerate, run `tools/propertygenerator/generate_properties.py`.
{# REUSE-IgnoreEnd #}

#include "{{ type_name }}.h"

#include "PropertiesTypes.h"

using namespace Union::Properties;
using namespace Qt::StringLiterals;

class Union::Properties::{{ type_name }}Private
{
public:
{% for property in properties %}
    std::optional<{{ property.type }}> {{ property.name }};
{% endfor %}
{% if extra_code and "private" in extra_code %}
{{ extra_code["private"] | render }}
{% endif %}
};

{{ type_name }}::{{ type_name }}()
    : d(std::make_unique<{{ type_name }}Private>())
{
}

{{ type_name }}::{{ type_name }}(const {{ type_name }} &other)
    : d(std::make_unique<{{ type_name }}Private>())
{
{% for property in properties %}
    d->{{ property.name }} = other.d->{{ property.name }};
{% endfor %}
}

{{ type_name }}::{{ type_name }}({{ type_name }} &&other)
    : d(std::move(other.d))
{
}

{{ type_name }}::~{{ type_name}}() = default;

{{ type_name }} &{{ type_name }}::operator=(const {{ type_name }} &other)
{
    if (this != &other) {
{% for property in properties %}
        d->{{ property.name }} = other.d->{{ property.name }};
{% endfor %}
    }
    return *this;
}

{{ type_name }} &{{ type_name }}::operator=({{ type_name }} &&other)
{
    std::swap(d, other.d);
    return *this;
}

{% for property in properties %}
std::optional<{{ property.type }}> {{ type_name }}::{{ property.name }}() const
{
    return d->{{ property.name }};
}

void {{ type_name }}::set{{ property.name | ucfirst }}(const std::optional<{{ property.type }}> &newValue)
{
    if (newValue == d->{{ property.name }}) {
        return;
    }

    d->{{ property.name }} = newValue;
}
{% endfor %}

bool {{ type_name }}::hasAnyValue() const
{
{% for property in properties %}
{% if property.is_group %}
    if (d->{{ property.name }}.has_value() && d->{{ property.name }}->hasAnyValue()) {
        return true;
    }
{% else %}
    if (d->{{ property.name }}.has_value()) {
        return true;
    }
{% endif %}
{% endfor %}
    return false;
}

void {{ type_name }}::resolveProperties(const {{ type_name }} &source, {{ type_name }} &destination)
{
{% for property in properties %}
{% if property.is_group %}
    if (source.d->{{ property.name }}.has_value()) {
        {{ property.type }} property;
        if (destination.d->{{ property.name }}.has_value()) {
            property = destination.d->{{ property.name }}.value();
        }
        {{ property.type }}::resolveProperties(source.d->{{ property.name }}.value(), property);
        if (property.hasAnyValue()) {
            destination.d->{{ property.name }} = property;
        }
    }
{% else %}
    if (!destination.d->{{ property.name }}.has_value()) {
        destination.d->{{ property.name }} = source.d->{{ property.name }};
    }
{% endif %}
{% endfor %}
}

{{ type_name }} {{ type_name }}::empty()
{
    {{ type_name }} result;
{% for property in properties %}
{% if property.is_property %}
    result.d->{{ property.name }} = {{ property.type }}::empty();
{% else %}
    result.d->{{ property.name }} = emptyValue<{{ property.type }}>();
{% endif %}
{% endfor %}
    return result;
}
{% if extra_code and "global" in extra_code %}

{{ extra_code["global"] | render }}
{% endif %}

bool Union::Properties::operator==(const {{ type_name }} &left, const {{ type_name}} &right)
{
{% for property in properties %}
    if (left.{{ property.name }}() != right.{{ property.name }}()) {
        return false;
    }
{% endfor %}
    return true;
}

QDebug operator<<(QDebug debug, const Union::Properties::{{ type_name }} &type)
{
    QDebugStateSaver saver(debug);
    debug.nospace() << "{{ type_name }}(" //
{% for property in properties %}
{% if property == properties[0] %}
                    << "{{property.name}}: " << type.{{ property.name }}() //
{% else %}
                    << ", {{property.name}}: " << type.{{ property.name }}() //
{% endif %}
{% endfor %}
                    << ")";
    return debug;
}

# SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
# SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>*

# \brief The root property group for all elements.
#
# This class contains all the properties that are used to style an element.

palette:
    # \brief A collection of colors to be used for coloring an element.

    accent: QColor
    alternateBase: QColor
    base: QColor
    brightText: QColor
    button: QColor
    buttonText: QColor
    dark: QColor
    highlight: QColor
    highlightedText: QColor
    light: QColor
    link: QColor
    linkVisited: QColor
    mid: QColor
    midlight: QColor
    placeholderText: QColor
    shadow: QColor
    text: QColor
    toolTipBase: QColor
    toolTipText: QColor
    window: QColor
    windowText: QColor
    positive: QColor
    neutral: QColor
    negative: QColor

    _extra_system_includes:
        "qml_group.h.j2":
        -   "QVariant"
        -   "QQmlComponent"
    _extra_code:
        "qml_group.h.j2":
            public: |4
                    Q_PROPERTY(QObject *quickPalette READ quickPalette NOTIFY updated)
                    QObject *quickPalette() const;

            private: |4
                    QObject *m_palette = nullptr;
                    QQmlComponent *m_component = nullptr;

        "qml_group.cpp.j2":
            update: |4
                    if (!m_component) {
                        // We need a QML engine to create a QQmlComponent. Try to determine it
                        // based on the style we're part of.
                        Q_ASSERT(m_style);

                        if (!m_style->engine()) {
                            return;
                        }

                        m_component = new QQmlComponent(m_style->engine());
                        m_component->setData("import QtQuick; Palette { }"_ba, QUrl{});
                    }

                    if (m_palette) {
                        delete m_palette;
                    }

                    m_palette = m_component->create();
                    {% for property in properties %}
                    {% if property.name not in ["positive", "neutral", "negative"] %}

                    if (m_state.{{ property.name }}()) {
                        m_palette->setProperty("{{ property.name }}", QVariant::fromValue(m_state.{{ property.name }}().value()));
                    }
                    {% endif %}
                    {% endfor %}

            global: |
                QObject *{{ type_name }}Group::quickPalette() const
                {
                    return m_palette;
                }

layout:
    # \brief A property group containing properties related to the layout of an element.

    alignment: &alignment
        # \brief A property group with properties related to alignment.

        container: Union::Properties::AlignmentContainer
        horizontal: Union::Properties::Alignment
        vertical: Union::Properties::Alignment
        order: int

    width: qreal
    height: qreal
    spacing: qreal

    padding: &size
        # \brief A property group representing a set of sizes for cardinal directions.

        left: qreal
        right: qreal
        top: qreal
        bottom: qreal

        _extra_system_includes:
            "property.h.j2":
            -   "QMarginsF"
        _extra_code:
            "property.h.j2":
                public: |4
                        /*!
                           Convert a Size property to QMarginsF.

                           If any values are not set, they will use 0.0.
                         */
                        QMarginsF toMargins() const;
            "property.cpp.j2":
                global: |4
                    QMarginsF {{ type_name }}::toMargins() const
                    {
                        return QMarginsF{d->left.value_or(0.0), d->top.value_or(0.0), d->right.value_or(0.0), d->bottom.value_or(0.0)};
                    }

    inset: *size

    margins: *size

text:
    # \brief A property group containing properties related to the text of an element.

    alignment: *alignment
    font: QFont
    color: QColor

icon:
    # \brief A property group containing properties related to an element's icon.

    alignment: *alignment
    width: qreal
    height: qreal
    name: QString
    source: QUrl
    color: QColor

background:
    # \brief A property group containing properties related to an element's background.

    color: QColor
    image: &image
        # \brief A property group describing properties of an image.

        imageData: QImage
        width: qreal
        height: qreal
        xOffset: qreal
        yOffset: qreal
        flags: Union::Properties::ImageFlags

border:
    # \brief A property group containing properties of an element's border.

    left: &line
        # \brief A property group containing the properties of a line.

        size: qreal
        color: QColor
        style: Union::Properties::LineStyle
        image: *image

    right: *line
    top: *line
    bottom: *line

outline:
    # \brief A property group containing properties of an element's outline.

    left: *line
    right: *line
    top: *line
    bottom: *line

corners:
    # \brief A property group containing properties of a background's corners.

    topLeft: &corner
        # \brief A property group containing the properties of a corner.

        radius: qreal
        width: qreal
        height: qreal
        color: QColor
        image: *image

    topRight: *corner
    bottomLeft: *corner
    bottomRight: *corner

shadow:
    # \brief A property group containing properties relating to an element's shadow.

    offset:
        horizontal: qreal
        vertical: qreal

    color: QColor
    size: qreal
    blur: qreal

    left: *line
    right: *line
    top: *line
    bottom: *line

    topLeft: *corner
    topRight: *corner
    bottomLeft: *corner
    bottomRight: *corner

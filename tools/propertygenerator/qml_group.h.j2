{#
SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
SPDX-FileCopyrightText: 2024 Arjen Hiemstra <ahiemstra@heimr.nl>

This is the template that is used to generate grouped properties for the QtQuick output plugin.
#}
// SPDX-License-Identifier: LGPL-2.1-only OR LGPL-3.0-only OR LicenseRef-KDE-Accepted-LGPL
//
// This file is automatically generated. To regenerate, run `tools/propertygenerator/generate_properties.py`.

#pragma once

{#
The include list may contain extra newlines that are hard to get rid of with the
template but that clang format doesn't like, so disable format for that.
#}
// clang-format off
#include <QObject>
#include <QProperty>
#include <qqmlregistration.h>

{% for include in system_includes | sort %}
#include <{{ include }}>
{% endfor %}

#include <properties/{{ type_name }}.h>

{% for value in values %}
{% if value.is_property %}
#include "{{ value.type }}Group.h"
{% endif %}
{% endfor %}
// clang-format on

class QuickStyle;

class {{ type_name }}Group : public QObject
{
    Q_OBJECT
    QML_ANONYMOUS

public:
    explicit {{ type_name }}Group(QuickStyle *style);

    void update(const Union::Properties::{{ type_name }} &newState);
    Q_SIGNAL void updated();

{% for value in values %}
{% if value.is_property %}
    Q_PROPERTY({{ value.type}}Group *{{ value.name }} READ {{ value.name }} CONSTANT)
    {{ value.type }}Group *{{ value.name }}() const;
{% else %}
    Q_PROPERTY({{ value.type }} {{ value.name }} READ {{ value.name }} NOTIFY {{ value.name }}Changed)
    {{ value.type }} {{ value.name }}() const;
    Q_SIGNAL void {{ value.name }}Changed();
{% endif %}

{% endfor %}
{% if extra_code and "public" in extra_code %}
{{ extra_code["public"] | render }}

{% endif %}
private:
    QuickStyle *m_style = nullptr;
{% for value in values %}
{% if value.is_property %}
    std::unique_ptr<{{ value.type }}Group> m_{{ value.name }};
{% endif %}
{% endfor %}
    Union::Properties::{{ type_name }} m_state;
{% if extra_code and "private" in extra_code %}
{{ extra_code["private"] | render }}
{% endif %}
};
